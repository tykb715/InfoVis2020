<html>
    <head>
	<title>W08: Task 3</title>
    </head>
    <body style="margin:0">
      <script src="three.min.js"></script>
      <script type="x-shader/x-vertex" id="phong.vert">
	varying vec3 point_color;
	varying vec4 point_position;
	varying vec3 normal_vector;
	
	void main()
	{
	point_color = color;
	point_position = modelViewMatrix * vec4( position, 1.0 );
	normal_vector = normalMatrix * normal;
	
	gl_Position = projectionMatrix * point_position;
	}
      </script>
      <script type="x-shader/x-fragment" id="phong.frag">
	varying vec3 point_color;
	varying vec4 point_position;
	varying vec3 normal_vector;
	uniform vec3 light_position;
	uniform vec3 camera_position;
	uniform int reflection_model;

	vec3 PhongReflection( vec3 C, vec3 L, vec3 N, vec3 V )
	 {
	     float ka = 0.3;
	     float kd = 0.5;
	     float ks = 0.8;
	     float n = 50.0;

	     vec3 R = reflect( -L, N );
	     float dd = dot( N, L );
	     float ds = 0.0;
	     if ( dd > 0.0 )
	     {
		 ds = pow( dot( R, V ), n );
	     }

	     float Ia = ka;
	     float Id = kd * dd;
	     float Is = ks * ds;
	     return C * ( Ia + Id + Is );
	}
	void main()
	{
	vec3 C = point_color;
	vec3 L = normalize( light_position - point_position.xyz );
	vec3 N = normalize( normal_vector );
	vec3 V = normalize( camera_position - point_position.xyz );
	vec3 shaded_color = PhongReflection( C, L, N, V );
	
	gl_FragColor = vec4( shaded_color, 1.0 );
	}
      </script>
      <script src="TrackballControls.js"></script>
      <script src="https://threejs.org/examples/js/math/Lut.js"></script>
      <script src="https://naohisas.github.io/KVS.js/Build/KVS.min.js"></script>
      <script src="https://naohisas.github.io/KVS.js/Build/KVS2THREE.min.js"></script>
      <script src="https://naohisas.github.io/KVS.js/Source/KVSLobsterData.js"></script>
      <script src="Bounds.js"></script>
      <script src="Isosurfaces3.js"></script>
      <script src="task3.js"></script>
      <script>
	main();
      </script>
    </body>
</html>
